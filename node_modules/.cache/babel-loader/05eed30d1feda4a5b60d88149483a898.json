{"ast":null,"code":"import _classCallCheck from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ascent/Desktop/practice/React_Basic/my-app/src/App.js\";\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport Movie from './Movie';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n\n    _this._renderMovies = function () {\n      var movies = _this.state.movies.map(function (movie) {\n        //change movies to movie\n        console.log(movie);\n        return React.createElement(Movie, {\n          title: movie.title,\n          poster: movie.medium_cover_image,\n          genres: movie.genres,\n          synopsis: movie.synopsis,\n          key: movie.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      }); //bunch of arrays\n\n\n      return movies;\n    };\n\n    _this._LoadingPart = function () {\n      //current most watched movies should be placed here\n      return 'Loadingㅎㅎ';\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    //Render: componentWillMount() -> render() -> componentDidMount()\n    //Update: componentWillReceiveProps() -> shouldComponentUpdate()==true -> componentWillUpdate() -> render() -> componentDidUpdate()\n    value: function componentWillMount() {\n      //make a request\n      console.log('will Mount');\n      /*\n      setTimeout(() => {\n        this.setState({//can't change the state directly.\n          greeting: 'Hello again!'//whenever the component mounts, we change greeting.\n        })\n      }, 10000)\n      }\n      _makeMovies = () => {\n      }\n      _callApi = (url) => {\n      return fetch(url)\n      .then(potato => potato.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n      }\n      _getData = async (inputs) => {//this is requesting different url function\n      //parse the inputs here\n      const url = \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\";\n      const getData = await this._callApi(url);\n       this.setState({getData});\n      \n      }\n      _getMovies = async () => {\n      const movies = await this._callApi(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\");//await?=>waiting for this._callApi() to be finished\n      //this line doesn't get run until the await variable finishes\n      console.log('before the state: ', this.state);\n      this.setState({movies});\n      console.log('after set state: ', this.state);\n      }\n      componentDidMount(){//this is this.setState() which can be used when updating the state\n      console.log('aaaa')\n      this._getMovies();\n       /*\n      setTimeout(()=>{\n        this.setState({\n          movies:[\n            {\n              title: \"Us\",\n              poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/0/00/Us_%282019%29_theatrical_poster.png/220px-Us_%282019%29_theatrical_poster.png\"\n            },\n            {\n              title: \"Toy Story 4\",\n              poster: \"http://t2.gstatic.com/images?q=tbn:ANd9GcTqR5uODJzk3PqEuZvzqCV52r_ZfmYkoy_Tl-H0vbzpgceszT2h\"\n            },\n            {\n              title: \"Winnie the Pooh\",\n              poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/1/10/Winniethepooh.png/220px-Winniethepooh.png\"\n            }\n          ]\n        })\n      },5000)\n      */\n    } //state is an object and react component. Whenever the state changes, the component renders.\n    //whenever state changes, render happens\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var movies = this.state.movies;\n      return (//jsx\n        React.createElement(\"div\", {\n          className: movies ? \"App\" : \"App--loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, this.state.movies ? this._renderMovies() : this._LoadingPart(), \";\")\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ascent/Desktop/practice/React_Basic/my-app/src/App.js"],"names":["React","Component","Movie","App","state","_renderMovies","movies","map","movie","console","log","title","medium_cover_image","genres","synopsis","id","_LoadingPart"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAGMC,G;;;;;;;;;;;;;;;;;UAyEJC,K,GAAQ,E;;UAGRC,a,GAAgB,YAAM;AACpB,UAAMC,MAAM,GAAG,MAAKF,KAAL,CAAWE,MAAX,CAAkBC,GAAlB,CAAsB,UAACC,KAAD,EAAW;AAAC;AAC/CC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,eAAO,oBAAC,KAAD;AACL,UAAA,KAAK,EAAEA,KAAK,CAACG,KADR;AAEL,UAAA,MAAM,EAAEH,KAAK,CAACI,kBAFT;AAGL,UAAA,MAAM,EAAEJ,KAAK,CAACK,MAHT;AAIL,UAAA,QAAQ,EAAEL,KAAK,CAACM,QAJX;AAKL,UAAA,GAAG,EAAEN,KAAK,CAACO,EALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAOD,OATc,CAAf,CADoB,CAWpB;;;AACA,aAAOT,MAAP;AACD,K;;UAEDU,Y,GAAe,YAAM;AAAC;AACpB,aAAO,WAAP;AACD,K;;;;;;;AA3FD;AAEA;yCAEoB;AAAC;AACnBP,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DD,K,CAED;AACA;;;;6BAwBS;AAAA,UACAJ,MADA,GACU,KAAKF,KADf,CACAE,MADA;AAEP,aAAQ;AACN;AAAK,UAAA,SAAS,EAAEA,MAAM,GAAG,KAAH,GAAW,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKF,KAAL,CAAWE,MAAX,GAAoB,KAAKD,aAAL,EAApB,GAA2C,KAAKW,YAAL,EAD9C;AADF;AAKD;;;;EAtGef,S;;AAyGlB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie'\n\n\nclass App extends Component {\n\n  //Render: componentWillMount() -> render() -> componentDidMount()\n\n  //Update: componentWillReceiveProps() -> shouldComponentUpdate()==true -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  componentWillMount(){//make a request\n    console.log('will Mount')\n    /*\n    setTimeout(() => {\n      this.setState({//can't change the state directly.\n        greeting: 'Hello again!'//whenever the component mounts, we change greeting.\n      })\n    }, 10000)\n  }\n\n  _makeMovies = () => {\n\n  }\n\n  _callApi = (url) => {\n    return fetch(url)\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _getData = async (inputs) => {//this is requesting different url function\n    //parse the inputs here\n    const url = \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\";\n    const getData = await this._callApi(url);\n\n    this.setState({getData});\n    \n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\");//await?=>waiting for this._callApi() to be finished\n    //this line doesn't get run until the await variable finishes\n    console.log('before the state: ', this.state);\n    this.setState({movies});\n    console.log('after set state: ', this.state);\n  }\n\n  componentDidMount(){//this is this.setState() which can be used when updating the state\n    console.log('aaaa')\n    this._getMovies();\n\n    /*\n    setTimeout(()=>{\n      this.setState({\n        movies:[\n          {\n            title: \"Us\",\n            poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/0/00/Us_%282019%29_theatrical_poster.png/220px-Us_%282019%29_theatrical_poster.png\"\n          },\n          {\n            title: \"Toy Story 4\",\n            poster: \"http://t2.gstatic.com/images?q=tbn:ANd9GcTqR5uODJzk3PqEuZvzqCV52r_ZfmYkoy_Tl-H0vbzpgceszT2h\"\n          },\n          {\n            title: \"Winnie the Pooh\",\n            poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/1/10/Winniethepooh.png/220px-Winniethepooh.png\"\n          }\n        ]\n      })\n    },5000)\n    */\n  }\n\n  //state is an object and react component. Whenever the state changes, the component renders.\n  //whenever state changes, render happens\n\n  state = {\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {//change movies to movie\n      console.log(movie)\n      return <Movie \n        title={movie.title} \n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        key={movie.id}\n         />\n    })\n    //bunch of arrays\n    return movies\n  }\n\n  _LoadingPart = () => {//current most watched movies should be placed here\n    return 'Loadingㅎㅎ';\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (//jsx\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : this._LoadingPart()};\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}