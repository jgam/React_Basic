{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ascent/Desktop/practice/React_Basic/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ascent/Desktop/practice/React_Basic/my-app/src/App.js\";\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport Movie from './Movie';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._jgmakeMovies = function () {};\n\n    _this._callApi = function (url) {\n      return fetch(url).then(function (potato) {\n        return potato.json();\n      }).then(function (json) {\n        return json.data.movies;\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this._jggetData =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(inputs) {\n        var url, getData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //this is requesting different url function\n                //parse the inputs here\n                console.log('_jggetData');\n                url = \"https://yts.am/api/v2/list_movies.json?sort_by=\";\n                _context.next = 4;\n                return _this._callApi(url + inputs);\n\n              case 4:\n                getData = _context.sent;\n\n                _this.setState({\n                  getData: getData\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this._getMovies =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(input) {\n        var url, movies;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = '';\n                console.log('here in get movies');\n                console.log(input);\n\n                if (!input) {\n                  url = \"https://yts.am/api/v2/list_movies.json?sort_by=year\"; //await?=>waiting for this._callApi() to be finished\n                  //this line doesn't get run until the await variable finishes\n                } else {\n                  url = \"https://yts.am/api/v2/list_movies.json?sort_by=\" + input;\n                }\n\n                _context2.next = 6;\n                return _this._callApi(url);\n\n              case 6:\n                movies = _context2.sent;\n                console.log('before the state: ', _this.state);\n\n                _this.setState({\n                  movies: movies\n                });\n\n                console.log('after set state: ', _this.state);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {};\n\n    _this._renderMovies = function () {\n      console.log('state sortBy is :', _this.state.sortBy);\n\n      var movies = _this.state.movies.map(function (movie) {\n        //change movies to movie\n        //console.log(movie)\n        return React.createElement(Movie, {\n          title: movie.title,\n          poster: movie.medium_cover_image,\n          genres: movie.genres,\n          synopsis: movie.synopsis,\n          key: movie.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }); //bunch of arrays\n\n\n      return movies;\n    };\n\n    _this._stateclickSubmit = function (event) {\n      console.log('state changed click submit');\n\n      _this.setState({\n        sortBy: event.target.value\n      });\n    };\n\n    _this._clickSubmit = function () {\n      console.log('submitted');\n      alert('A name was submitted: ' + _this.state.sortBy);\n\n      _this._getMovies(_this.state.sortBy);\n    };\n\n    _this._LoadingPart = function () {\n      //current most watched movies should be placed here\n      return 'Loadingㅎㅎ';\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    //Render: componentWillMount() -> render() -> componentDidMount()\n    //Update: componentWillReceiveProps() -> shouldComponentUpdate()==true -> componentWillUpdate() -> render() -> componentDidUpdate()\n    value: function componentWillMount() {\n      //make a request\n      console.log('will Mount');\n      console.log(this.state);\n\n      if (this.state.sortBy) {\n        console.log('shouldbe there');\n\n        this._getMovies(this.state.sortBy);\n      } else {\n        console.log('hahaha');\n\n        this._getMovies();\n      }\n      /*\n      setTimeout(() => {\n        this.setState({//can't change the state directly.\n          greeting: 'Hello again!'//whenever the component mounts, we change greeting.\n        })\n      }, 10000)\n      */\n\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      console.log('componenWillUpdate');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //this is this.setState() which can be used when updating the state\n      console.log('aaaa'); //this._getMovies();\n\n      /*\n      setTimeout(()=>{\n        this.setState({\n          movies:[\n            {\n              title: \"Us\",\n              poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/0/00/Us_%282019%29_theatrical_poster.png/220px-Us_%282019%29_theatrical_poster.png\"\n            },\n            {\n              title: \"Toy Story 4\",\n              poster: \"http://t2.gstatic.com/images?q=tbn:ANd9GcTqR5uODJzk3PqEuZvzqCV52r_ZfmYkoy_Tl-H0vbzpgceszT2h\"\n            },\n            {\n              title: \"Winnie the Pooh\",\n              poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/1/10/Winniethepooh.png/220px-Winniethepooh.png\"\n            }\n          ]\n        })\n      },5000)\n      */\n    } //state is an object and react component. Whenever the state changes, the component renders.\n    //whenever state changes, render happens\n\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      console.log('componentWillReceive Props');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log('render');\n      var movies = this.state.movies;\n      return (//jsx\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"searchMovie\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          onSubmit: this._clickSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          name: \"sortBy\",\n          value: this.state.sortBy,\n          onChange: this._stateclickSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: movies ? \"App\" : \"App--loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, \"console.log('')\", this.state.movies ? this._renderMovies() : this._LoadingPart(), \";\"))\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ascent/Desktop/practice/React_Basic/my-app/src/App.js"],"names":["React","Component","Movie","App","_jgmakeMovies","_callApi","url","fetch","then","potato","json","data","movies","catch","err","console","log","_jggetData","inputs","getData","setState","_getMovies","input","state","_renderMovies","sortBy","map","movie","title","medium_cover_image","genres","synopsis","id","_stateclickSubmit","event","target","value","_clickSubmit","alert","_LoadingPart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie'\n\n\nclass App extends Component {\n\n  //Render: componentWillMount() -> render() -> componentDidMount()\n\n  //Update: componentWillReceiveProps() -> shouldComponentUpdate()==true -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  componentWillMount(){//make a request\n    console.log('will Mount')\n    console.log(this.state);\n    if(this.state.sortBy){\n      console.log('shouldbe there')\n      this._getMovies(this.state.sortBy);\n    }\n    else{\n      console.log('hahaha');\n      this._getMovies();\n    }\n    \n    /*\n    setTimeout(() => {\n      this.setState({//can't change the state directly.\n        greeting: 'Hello again!'//whenever the component mounts, we change greeting.\n      })\n    }, 10000)\n    */\n  }\n\n  _jgmakeMovies = () => {\n\n  }\n\n  _callApi = (url) => {\n    return fetch(url)\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _jggetData = async (inputs) => {//this is requesting different url function\n    //parse the inputs here\n    console.log('_jggetData')\n    const url = \"https://yts.am/api/v2/list_movies.json?sort_by=\";\n    const getData = await this._callApi(url+inputs);\n\n    this.setState({getData});\n    \n  }\n  componentWillUpdate(){\n    console.log('componenWillUpdate')\n  }\n\n  _getMovies = async (input) => {\n    let url = ''\n    console.log('here in get movies')\n    console.log(input);\n    if (!input){\n      url = \"https://yts.am/api/v2/list_movies.json?sort_by=year\";//await?=>waiting for this._callApi() to be finished\n    //this line doesn't get run until the await variable finishes\n    }\n    else{\n      url = \"https://yts.am/api/v2/list_movies.json?sort_by=\"+input;\n    }\n    const movies = await this._callApi(url);\n    console.log('before the state: ', this.state);\n    this.setState({movies});\n    console.log('after set state: ', this.state);\n  }\n\n  componentDidMount(){//this is this.setState() which can be used when updating the state\n    console.log('aaaa')\n    //this._getMovies();\n\n    /*\n    setTimeout(()=>{\n      this.setState({\n        movies:[\n          {\n            title: \"Us\",\n            poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/0/00/Us_%282019%29_theatrical_poster.png/220px-Us_%282019%29_theatrical_poster.png\"\n          },\n          {\n            title: \"Toy Story 4\",\n            poster: \"http://t2.gstatic.com/images?q=tbn:ANd9GcTqR5uODJzk3PqEuZvzqCV52r_ZfmYkoy_Tl-H0vbzpgceszT2h\"\n          },\n          {\n            title: \"Winnie the Pooh\",\n            poster: \"https://upload.wikimedia.org/wikipedia/en/thumb/1/10/Winniethepooh.png/220px-Winniethepooh.png\"\n          }\n        ]\n      })\n    },5000)\n    */\n  }\n\n  //state is an object and react component. Whenever the state changes, the component renders.\n  //whenever state changes, render happens\n\n  state = {\n  }\n\n  _renderMovies = () => {\n    console.log('state sortBy is :', this.state.sortBy);\n    const movies = this.state.movies.map((movie) => {//change movies to movie\n      //console.log(movie)\n      return <Movie \n        title={movie.title} \n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        key={movie.id}\n         />\n    })\n    //bunch of arrays\n    return movies\n  }\n\n  componentWillReceiveProps(){\n    console.log('componentWillReceive Props')\n  }\n\n  _stateclickSubmit = (event) => {\n    console.log('state changed click submit')\n    this.setState({sortBy: event.target.value});\n  }\n\n  _clickSubmit= () => {\n    console.log('submitted')\n    alert('A name was submitted: ' + this.state.sortBy);\n    this._getMovies(this.state.sortBy);\n  }\n\n  _LoadingPart = () => {//current most watched movies should be placed here\n    return 'Loadingㅎㅎ';\n  }\n\n  render() {\n    console.log('render');\n    const {movies} = this.state;\n    return (//jsx\n      <div>\n        <div className=\"searchMovie\">\n          <form onSubmit={this._clickSubmit}>\n            <input type=\"text\" name=\"sortBy\" value={this.state.sortBy} onChange={this._stateclickSubmit}/>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n        <div className={movies ? \"App\" : \"App--loading\"}>\n          console.log('')\n          {this.state.movies ? this._renderMovies() : this._LoadingPart()};\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}